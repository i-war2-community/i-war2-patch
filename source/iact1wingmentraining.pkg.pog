package iAct1WingmenTraining;

uses Set,
     List,
     String,
     Global,
     Sim,
     Group,
     Math,
     Object,
     State,
     Task,
     Text,
     iSim,
     iBody,
     iHabitat,
     iShip,
     Subsim,
     iDockport,
     iLagrangePoint,
     iAI,
     iConversation,
     MapEnumerations,
     iFaction,
     iHUD,
     iMapEntity,
     iPilotSetup,
     INIFile,
     iUtilities,
     iWingmen;

provides Main,
         MainTask;

prototype Main();
prototype local_function_7( hgroup group_, bool param_1_ );
prototype local_function_0( hgroup group_, bool param_1_ );
prototype task local_function_4( hsim param_0_, hgroup group_0_, hstate state_ );
prototype hgroup local_function_9( hsim param_0_ );
prototype task local_function_2( int param_0_ );
prototype task local_function_1( hsim param_0_, hship ship_, hstate state_ );
prototype task local_function_3( hgroup group_, hstate state_ );
prototype bool local_function_5( list localList_, hship ship_ );
prototype local_function_6( hgroup group_0_, hsim param_1_, hstate state_ );
prototype task local_function_8( hgroup group_0_, hsim param_1_, hstate state_ );
prototype task local_function_10( hsim param_0_, hgroup group_0_, hstate state_ );
prototype task MainTask();

Main()
{
	start MainTask();
}

local_function_7( hgroup group_, bool param_1_ )
{
	int simCount = Group.SimCount( group_ );
	int ii;
	
	for ( ii = 0; ii < simCount; ++ii )
	{
		iSim.SetSensorVisibility( iSim.Cast( Group.NthSim( group_, ii ) ), param_1_ );
	}
}

local_function_0( hgroup group_, bool param_1_ )
{
	hfaction marauders = iFaction.Find( "Marauders" );
	hfaction independent = iFaction.Find( "Independent" );
	hisim local_2;
	int simCount = Group.SimCount( group_ );
	int ii;
	
	if ( param_1_ == 1 )
	{
		for ( ii = 0; ii < simCount; ++ii )
		{
			local_2 = iSim.Cast( Group.NthSim( group_, ii ) );
			iSim.SetFaction( local_2, marauders );
			iSim.SetIndestructable( local_2, false );
		}
		
		return;
	}
	
	for ( ii = 0; ii < simCount; ++ii )
	{
		local_2 = iSim.Cast( Group.NthSim( group_, ii ) );
		iSim.SetFaction( local_2, independent );
		iSim.SetIndestructable( local_2, true );
	}
}

task local_function_4( hsim param_0_, hgroup group_0_, hstate state_ )
{
	hgroup group_1 = Group.NthGroup( group_0_, 0 );
	hship ship = iShip.Cast( Group.NthSim( group_0_, 2 ) );
	hship shipFudgeMine;
	hsim groupLeader = Group.Leader( group_0_ );
	hsim waypoint;
	int local_5 = ( 30 - Group.SimCount( group_1 ) );
	int ii;
	
	State.SetProgress( state_, 3 );
	iAI.GiveApproachOrder( ship, groupLeader );
	
	for ( ii = 0; ii < local_5; ++ii )
	{
		waypoint = iUtilities.CreateWaypointNear( groupLeader, Math.Random( 0.0, 700.0 ) );
		iAI.GiveApproachOrder( ship, waypoint );
		
		do
		{
			Task.Sleep( Task.Current(), 0.50 );
		}
		while ( !iAI.IsOrderComplete( ship ) );
		
		Sim.Destroy( waypoint );
		shipFudgeMine = iShip.Create( "ini:/sims/custom/act2_mission03/fudge_mine", "a1_training_name_mine" );
		iSim.SetIndestructable( shipFudgeMine, true );
		iSim.SetSensorVisibility( shipFudgeMine, false );
		Sim.PlaceAt( shipFudgeMine, ship );
		Group.AddSim( group_1, shipFudgeMine );
	}
	
	local_function_0( group_1, false );
	iAI.GiveFormateOrder( ship, Group.NthSim( group_0_, 1 ), 0.0, 0.0, 0.0 );
	State.SetProgress( state_, 0 );
	iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_ready" );
}

hgroup local_function_9( hsim param_0_ )
{
	hgroup group_0 = Group.Create();
	hgroup group_1 = Group.Create();
	hship ship;
	hsim waypoint = iUtilities.CreateWaypointRelativeTo( param_0_, 0.0, 0.0, 2500.0 );
	int constant = 30;
	int ii;
	
	Group.AddSim( group_0, waypoint );
	Group.AddSim( group_0, iUtilities.CreateWaypointRelativeTo( param_0_, 0.0, 0.0, -1000.0 ) );
	ship = iShip.Create( "ini:/sims/ships/utility/truck", "a1_training_name_mine_layer" );
	Sim.PlaceAt( ship, Group.NthSim( group_0, 1 ) );
	iPilotSetup.GenericCargoPod( ship );
	iSim.SetIndestructable( ship, true );
	Group.AddSim( group_0, ship );
	ship = iShip.Create( "ini:/sims/ships/player/snrv_jafs", "a1_training_name_dock" );
	Sim.PlaceRelativeTo( ship, param_0_, 0.0, 0.0, 5000.0 );
	iSim.SetIndestructable( ship, true );
	Group.AddSim( group_0, ship );
	
	for ( ii = 0; ii < constant; ++ii )
	{
		ship = iShip.Create( "ini:/sims/custom/act2_mission03/fudge_mine", "a1_training_name_mine" );
		iSim.SetSensorVisibility( ship, false );
		Sim.PlaceNear( ship, waypoint, Math.Random( 0.0, 700.0 ) );
		Group.AddSim( group_1, ship );
	}
	
	local_function_0( group_1, false );
	Group.AddGroup( group_0, group_1 );
	return group_0;
}

task local_function_2( int param_0_ )
{
	int local_0 = param_0_;
	
	Global.CreateInt( "g_timer", 2, 0 );
	
	schedule
	{
		every 1.0:
		{
			if ( local_0 > 0 )
			{
				local_0 = ( local_0 + -1 );
			}
			else
			{
				iHUD.SetPrompt( "", "" );
				return;
			}
			
			Global.SetInt( "g_timer", local_0 );
			iHUD.SetPrompt( String.Join( "a1_training_time_remain+ +", iUtilities.ConvertSecondsToTime( local_0 ) ), "" );
		}
	}
}

task local_function_1( hsim param_0_, hship ship_, hstate state_ )
{
	iPilotSetup.GenericCargoPod( iShip.Cast( param_0_ ) );
	iAI.GiveApproachOrderAdvanced( iShip.Cast( param_0_ ), ship_, 0.0, 0.0, false );
	
	do
	{
		if ( Sim.DistanceBetween( param_0_, ship_ ) <= 250.0 )
		{
			iSim.Kill( iSim.Cast( param_0_ ) );
			
			if ( (Object.IntProperty( ship_, "hit_points" ) - 50) <= 0 )
			{
				iSim.Kill( ship_ );
			}
			else
			{
				Object.SetIntProperty( ship_, "hit_points", Object.IntProperty( ship_, "hit_points" ) - 50 );
			}
			
			return;
		}
		
		Task.Sleep( Task.Current(), 1.0 );
	}
	while ( (Sim.DistanceBetween( ship_, param_0_ ) < 2000.0) && (State.Progress( state_ ) == 1) );
	
	iShip.RemovePilot( iShip.Cast( param_0_ ) );
}

task local_function_3( hgroup group_, hstate state_ )
{
	hship playerShip = iShip.FindPlayerShip();
	hsim groupIter;
	int simCount;
	int ii;
	
	schedule
	{
		every 1.0:
		{
			simCount = Group.SimCount( group_ );
			
			for ( ii = 0; ii < simCount; ++ii )
			{
				groupIter = Group.NthSim( group_, ii );
				
				if ( (Sim.DistanceBetween( playerShip, groupIter ) < 700.0) && !Object.PropertyExists( groupIter, "mine_active" ) )
				{
					start local_function_1( groupIter, playerShip, state_ );
				}
			}
		}
	}
}

bool local_function_5( list localList_, hship ship_ )
{
	if ( List.ItemCount( localList_ ) == 2 )
	{
		if ( iSim.IsDockedTo( iSim.Cast( List.GetNth( localList_, 0 ) ), ship_ ) && iSim.IsDockedTo( iSim.Cast( List.GetNth( localList_, 1 ) ), ship_ ) )
		{
			return true;
		}
	}
	else if ( iSim.IsDockedTo( iSim.Cast( List.GetNth( localList_, 0 ) ), ship_ ) )
	{
		return true;
	}
	
	return false;
}

local_function_6( hgroup group_0_, hsim param_1_, hstate state_ )
{
	hship ship = iShip.Cast( Group.NthSim( group_0_, 3 ) );
	list localList = iWingmen.GetAllTFighters();
	hgroup group_1 = Group.NthGroup( group_0_, 0 );
	int constant = 90;
	int gTimer;
	htask local_5 = start local_function_2( constant );
	htask local_6 = start local_function_3( group_1, state_ );
	
	schedule
	{
		every 1.0:
		{
			if ( Task.IsHalted( local_5 ) )
			{
				iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_tough_luck" );
				Task.Detach( start local_function_4( param_1_, group_0_, state_ ) );
				iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_reseting" );
				iHUD.SetPrompt( "", "" );
				
				if ( State.Progress( state_ ) != 8 )
				{
					State.SetProgress( state_, 2 );
				}
				
				return;
			}
			
			if ( local_function_5( localList, ship ) )
			{
				Task.Halt( local_5 );
				Task.Halt( local_6 );
				
				if ( Group.SimCount( group_1 ) != 0 )
				{
					iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_whats_wrong" );
				}
				else
				{
					iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_lets_see" );
					gTimer = Global.Int( "g_timer" );
					
					if ( gTimer != 0 )
					{
						if ( (constant - gTimer) < Object.IntProperty( state_, "best_time" ) )
						{
							Object.SetIntProperty( state_, "best_time", constant - gTimer );
							iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_good" );
						}
						else
						{
							iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_good_bad" );
						}
						
						State.SetProgress( state_, 8 );
					}
					else
					{
						iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_tough_luck" );
						
						if ( State.Progress( state_ ) != 8 )
						{
							State.SetProgress( state_, 2 );
						}
					}
				}
				
				Task.Detach( start local_function_4( param_1_, group_0_, state_ ) );
				iConversation.OneLiner( none, "name_clay", "a1_training_dialogue_clay_reseting" );
				iHUD.SetPrompt( "", "" );
				return;
			}
		}
	}
}

task local_function_8( hgroup group_0_, hsim param_1_, hstate state_ )
{
	hgroup group_1 = Group.NthGroup( group_0_, 0 );
	int convoResponse;
	
	iConversation.Begin();
	iConversation.AddResponse( "a1_training_text_cal_about", "a1_training_dialogue_cal_about" );
	iConversation.AddResponse( "a1_training_text_cal_fastest", "a1_training_dialogue_cal_fastest" );
	iConversation.AddResponse( "a1_training_text_cal_start", "a1_training_dialogue_cal_start" );
	iConversation.AddResponse( "a1_training_text_cal_nothing", "a1_training_dialogue_cal_nothing" );
	convoResponse = iConversation.Ask( none, "name_clay", "a1_training_dialogue_clay_at_course" );
	
	switch ( convoResponse )
	{
		case 1:
			iConversation.Say( none, "name_clay", "a1_training_dialogue_clay_about_tfighters" );
			break;
		
		case 2:
			iConversation.Say( none, "name_clay", "a1_training_dialogue_clay_the_fastest" );
			iHUD.SetPrompt( iUtilities.ConvertSecondsToTime( Object.IntProperty( state_, "best_time" ) ), "" );
			break;
		
		case 3:
			if ( State.Progress( state_ ) != 3 )
			{
				iConversation.Say( none, "name_clay", "a1_training_dialogue_clay_ok" );
				State.SetProgress( state_, 1 );
				Task.Sleep( Task.Current(), 2.0 );
				iConversation.Say( none, "name_clay", "a1_training_dialogue_clay_go" );
				local_function_0( group_1, true );
				iConversation.End();
				local_function_6( group_0_, param_1_, state_ );
			}
			else
			{
				iConversation.Say( none, "name_clay", "a1_training_dialogue_clay_wait" );
			}
			
			break;
		
		default:
			Task.Sleep( Task.Current(), 40.0 );
			break;
	}
	
	iConversation.End();
}

task local_function_10( hsim param_0_, hgroup group_0_, hstate state_ )
{
	hship playerShip = iShip.FindPlayerShip();
	hgroup group_1 = Group.NthGroup( group_0_, 0 );
	int local_2;
	htask local_3;
	bool local_4 = false;
	
	schedule
	{
		every 1.0:
		{
			if ( (Sim.DistanceBetween( param_0_, playerShip ) <= 800.0) && ((Task.IsHalted( local_3 ) == 1) && (State.Progress( state_ ) != 1)) )
			{
				local_function_7( group_1, true );
				local_3 = start local_function_8( group_0_, param_0_, state_ );
				
				do
				{
					Task.Sleep( Task.Current(), 2.0 );
				}
				while ( Task.IsRunning( local_3 ) );
				
				Task.Sleep( Task.Current(), 10.0 );
			}
		}
	}
}

task MainTask()
{
	bool local_0 = false;
	hgroup group;
	htask local_2;
	hship playerShip = iShip.FindPlayerShip();
	hsim waypointLucreciasBase;
	string local_5;
	hstate taskState = State.Find( Task.Current() );
	
	if ( Global.Exists( "g_started_wingmen_training" ) && (taskState == false) )
	{
		return;
	}
	
	if ( Global.Exists( "g_got_position" ) )
	{
		State.Destroy( Task.Current() );
		Sim.Destroy( waypointLucreciasBase );
		Global.Destroy( "g_started_wingmen_training" );
		return;
	}
	
	if ( (taskState == false) && (iWingmen.TFighterCount() != 0) )
	{
		taskState = State.Create( Task.Current(), 0 );
		Object.AddIntProperty( taskState, "best_time", 60 );
		Text.Add( "csv:/text/act_1/act1_wingmen_training" );
		iConversation.OneLiner( none, "name_clay", "a1_training_clay_just_fly" );
		Global.CreateBool( "g_started_wingmen_training", 2, true );
	}
	else
	{
		Global.Destroy( "g_training_task_handle" );
	}
	
	State.SetProgress( taskState, 0 );
	waypointLucreciasBase = iUtilities.CreateWaypointRelativeTo( iMapEntity.FindByName( "Lucrecia's Base" ), 20000.0, 0.0, 0.0 );
	iUtilities.MakeWaypointVisible( waypointLucreciasBase, true, "a1_training_waypoint_training_point" );
	
	schedule
	{
		every 1.0:
		{
			if ( Global.Int( "g_current_act" ) == 1 )
			{
				if ( (Sim.DistanceBetween( playerShip, waypointLucreciasBase ) < Global.Float( "g_player_sensor_range" )) && !local_0 )
				{
					local_0 = true;
					group = local_function_9( waypointLucreciasBase );
				}
			}
			else
			{
				State.Destroy( Task.Current() );
				Sim.Destroy( waypointLucreciasBase );
				Global.Destroy( "g_training_task_handle" );
				Global.Destroy( "g_started_wingmen_training" );
				return;
			}
			
			if ( (Sim.DistanceBetween( playerShip, waypointLucreciasBase ) <= 700.0) && (Task.IsHalted( local_2 ) == 1) )
			{
				if ( iWingmen.TFighterCount() != 0 )
				{
					local_2 = start local_function_10( waypointLucreciasBase, group, taskState );
				}
			}
		}
	}
}

