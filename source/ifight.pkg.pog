package iFight;

uses Debug,
     List,
     Set,
     String,
     Global,
     Sim,
     Group,
     INIFile,
     Math,
     Object,
     iFaction,
     iSim,
     iShip,
     Subsim,
     iDockport,
     iLagrangePoint,
     iAI,
     iComms,
     iFormation,
     MapEnumerations,
     iMapEntity,
     iBody,
     iHabitat,
     iUtilities,
     iCargo,
     CargoTypes,
     iCargoScript,
     iPilotSetup,
     iShipCreation;

provides GangsterCallForBackup,
         PoliceCallForBackup,
         MilitaryCallForBackup;

prototype hinifile local_function_0();
prototype task GangsterCallForBackup( hship requestor_ship_, hship aggressor_ship_ );
prototype task PoliceCallForBackup( hship requestor_ship_, hship aggressor_ship_ );
prototype task MilitaryCallForBackup( hship requestor_ship_, hship aggressor_ship_ );

hinifile local_function_0()
{
	return INIFile.Cast( Global.Handle( "g_stock_utterance_ini" ) );
}

task GangsterCallForBackup( hship requestor_ship_, hship aggressor_ship_ )
{
	int random;
	int local_1;
	float gPlayerSensorRange = Global.Float( "g_player_sensor_range" );
	set localSet_0 = iMapEntity.SystemHabitats();
	set localSet_1;
	IeAllegiance ieAllegiance = A_Independent;
	hinifile inifile;
	hgroup group = iShipCreation.GetTraffic( ST_CombatAll, ieAllegiance, Math.RandomInt( 1, 5 ) );
	hship ship_2 = iShip.Cast( Group.NthSim( group, 0 ) );
	hship playerShip;
	string local_10;
	
	if ( Global.Exists( "g_running_gangster_call_for_backup" ) )
	{
		Group.Destroy( group, true );
		return;
	}
	
	if ( Object.IDModulus( requestor_ship_, 2 ) == 1 )
	{
		local_10 = "_male_1";
	}
	else
	{
		local_10 = "_female_1";
	}
	
	Global.CreateBool( "g_running_gangster_call_for_backup", 1, true );
	debug Debug.PrintString( "iFight.GangsterCallForBackup: Starting task\n" );
	localSet_1 = iUtilities.FilterOnFriendlyHabitats( localSet_0, ieAllegiance );
	
	if ( Set.ItemCount( localSet_1 ) == 0 )
	{
		debug Debug.PrintString( "iFight.GangsterCallForBackup: Unable to find habitat of the correct allegiance to send out ships from!!\n" );
		return;
	}
	
	inifile = local_function_0();
	local_1 = INIFile.Int( inifile, "stock_warn", "num_entries", 1 );
	random = Math.RandomInt( 1, local_1 );
	playerShip = iShip.FindPlayerShip();
	
	if ( (aggressor_ship_ == playerShip) && (Sim.DistanceBetween( playerShip, requestor_ship_ ) < 50000.0) )
	{
		iComms.Shout( requestor_ship_, "", String.Join( String.Join( "stock_warn_", String.FromInt( random ) ), local_10 ) );
	}
	
	debug Debug.PrintString( "iFight.GangsterCallForBackup: Placing Head Ship\n" );
	Sim.PlaceRelativeTo( ship_2, iMapEntity.WaypointForEntity( iHabitat.Nearest( localSet_1, requestor_ship_ ) ), 500.0, 0.0, 0.0 );
	
	debug atomic
	{
		Debug.PrintString( "iFight.GangsterCallForBackup: Placing " );
		Debug.PrintInt( Group.SimCount( group ) );
		Debug.PrintString( " Ships in Formation\n" );
	}
	
	if ( Group.SimCount( group ) > 1 )
	{
		iFormation.Impi( group, 20.0, true );
	}
	
	debug Debug.PrintString( "iFight.GangsterCallForBackup: Giving formate orders at destination\n" );
	iAI.GiveFormateOrder( ship_2, requestor_ship_, 0.0, 0.0, 0.0 );
	debug Debug.PrintString( "iFight.GangsterCallForBackup: Starting Wait for arrival loop\n" );
	
	if ( (requestor_ship_ != false) && (aggressor_ship_ != false) )
	{
		iAI.GiveAttackOrder( requestor_ship_, aggressor_ship_ );
	}
	
	schedule
	{
		every 30.0:
		{
			if ( iAI.IsOrderComplete( ship_2 ) )
			{
				break;
			}
		}
	}
	
	debug Debug.PrintString( "iFight.GangsterCallForBackup: Arrived at destination, staying alive while player is here\n" );
	
	schedule
	{
		every 50.0:
		{
			if ( iUtilities.PlayerInRange( Group.Leader( group ) ) )
			{
				break;
			}
		}
	}
	
	debug Debug.PrintString( "iFight.GangsterCallForBackup: Destroying support vessels\n" );
	Group.Destroy( group, true );
	Global.Destroy( "g_running_gangster_call_for_backup" );
}

task PoliceCallForBackup( hship requestor_ship_, hship aggressor_ship_ )
{
	int random;
	int local_1;
	float gPlayerSensorRange = Global.Float( "g_player_sensor_range" );
	set localSet_0 = iMapEntity.SystemHabitats();
	set localSet_1;
	IeAllegiance ieAllegiance = A_Police;
	hinifile gShippingIni = INIFile.Cast( Global.Handle( "g_shipping_ini" ) );
	hinifile inifile;
	hgroup group = iShipCreation.GetTraffic( ST_CombatAll, ieAllegiance, Math.RandomInt( 1, 5 ) );
	hship ship_2 = iShip.Cast( Group.NthSim( group, 0 ) );
	hship playerShip;
	string local_11;
	
	if ( Global.Exists( "g_running_police_call_for_backup" ) )
	{
		Group.Destroy( group, true );
		return;
	}
	
	if ( Object.IDModulus( requestor_ship_, 2 ) == 1 )
	{
		local_11 = "_male_1";
	}
	else
	{
		local_11 = "_female_1";
	}
	
	Global.CreateBool( "g_running_police_call_for_backup", 1, true );
	debug Debug.PrintString( "iFight.PoliceCallForBackup: Starting task\n" );
	localSet_1 = iHabitat.FilterOnType( localSet_0, HT_PoliceBase );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_PoliceOutpost ) );
	
	if ( Set.ItemCount( localSet_1 ) == 0 )
	{
		debug Debug.PrintString( "iFight.PoliceCallForBackup: Unable to find Police Facility to find backup from!\n" );
		return;
	}
	
	inifile = local_function_0();
	local_1 = INIFile.Int( inifile, "stock_attack", "num_entries", 1 );
	random = Math.RandomInt( 1, local_1 );
	playerShip = iShip.FindPlayerShip();
	
	if ( (aggressor_ship_ == playerShip) && (Sim.DistanceBetween( playerShip, requestor_ship_ ) < 50000.0) )
	{
		iComms.Shout( requestor_ship_, "", String.Join( "stock_attack_", String.FromInt( random ) ) );
	}
	
	debug Debug.PrintString( "iFight.PoliceCallForBackup: Placing Head Ship\n" );
	Sim.PlaceRelativeTo( ship_2, iMapEntity.WaypointForEntity( iHabitat.Nearest( localSet_1, requestor_ship_ ) ), 500.0, 0.0, 0.0 );
	
	debug atomic
	{
		Debug.PrintString( "iFight.PoliceCallForBackup: Placing " );
		Debug.PrintInt( Group.SimCount( group ) );
		Debug.PrintString( " Ships in Formation\n" );
	}
	
	iFormation.Claw( group, 20.0, true );
	debug Debug.PrintString( "iFight.PoliceCallForBackup: Giving support ships destination orders\n" );
	iAI.GiveFormateOrder( ship_2, requestor_ship_, 0.0, 0.0, 0.0 );
	debug Debug.PrintString( "iFight.PoliceCallForBackup: Starting Wait for arrival loop\n" );
	
	if ( (requestor_ship_ != false) && (aggressor_ship_ != false) )
	{
		iAI.GiveAttackOrder( requestor_ship_, aggressor_ship_ );
	}
	
	schedule
	{
		every 30.0:
		{
			if ( iAI.IsOrderComplete( ship_2 ) )
			{
				break;
			}
		}
	}
	
	debug Debug.PrintString( "iFight.PoliceCallForBackup: Arrived at destination, staying alive while player is here\n" );
	
	schedule
	{
		every 50.0:
		{
			if ( iUtilities.PlayerInRange( Group.Leader( group ) ) )
			{
				break;
			}
		}
	}
	
	debug Debug.PrintString( "iFight.PoliceCallForBackup: Destroying support vessels\n" );
	Global.Destroy( "g_running_police_call_for_backup" );
	Group.Destroy( group, true );
}

task MilitaryCallForBackup( hship requestor_ship_, hship aggressor_ship_ )
{
	int random;
	int local_1;
	float gPlayerSensorRange = Global.Float( "g_player_sensor_range" );
	set localSet_0 = iMapEntity.SystemHabitats();
	set localSet_1;
	IeAllegiance ieAllegiance = A_Military;
	hinifile gShippingIni = INIFile.Cast( Global.Handle( "g_shipping_ini" ) );
	hinifile inifile;
	hgroup group = iShipCreation.GetTraffic( ST_CombatAll, ieAllegiance, Math.RandomInt( 3, 5 ) );
	hship ship_2 = iShip.Cast( Group.NthSim( group, 0 ) );
	hship playerShip;
	string local_11;
	
	if ( Global.Exists( "g_running_military_call_for_backup" ) )
	{
		Group.Destroy( group, true );
		return;
	}
	
	Global.CreateBool( "g_running_military_call_for_backup", 1, true );
	debug Debug.PrintString( "iFight.MilitaryCallForBackup: Starting task\n" );
	localSet_1 = iHabitat.FilterOnType( localSet_0, HT_NavalAcademy );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_NavalTrainingBase ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_SystemDefenceStation ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_SystemDefenceDock ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_PerimeterDefences ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_JumpFortress ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_DefenceStation ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_SecurityStation ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_Fortress ) );
	Set.Union( localSet_1, iHabitat.FilterOnType( localSet_0, HT_MarineBarracks ) );
	
	if ( Set.ItemCount( localSet_1 ) == 0 )
	{
		debug Debug.PrintString( "iFight.MilitaryCallForBackup: Unable to find Police Facility to find backup from!\n" );
		return;
	}
	
	debug Debug.PrintString( "iFight.MilitaryCallForBackup: Placing Head Ship\n" );
	
	if ( Object.IDModulus( requestor_ship_, 2 ) == 1 )
	{
		local_11 = "_male_1";
	}
	else
	{
		local_11 = "_female_1";
	}
	
	Sim.PlaceRelativeTo( Group.NthSim( group, 0 ), iMapEntity.WaypointForEntity( iHabitat.Nearest( localSet_1, requestor_ship_ ) ), 500.0, 0.0, 0.0 );
	
	debug atomic
	{
		Debug.PrintString( "iFight.MilitaryCallForBackup: Placing " );
		Debug.PrintInt( Group.SimCount( group ) );
		Debug.PrintString( " Ships in Formation\n" );
	}
	
	iFormation.Wedge( group, 20.0, true );
	debug Debug.PrintString( "iFight.MilitaryCallForBackup: Giving support ships destination orders\n" );
	iAI.GiveFormateOrder( ship_2, requestor_ship_, 0.0, 0.0, 0.0 );
	inifile = local_function_0();
	local_1 = INIFile.Int( inifile, "stock_attack", "num_entries", 1 );
	random = Math.RandomInt( 1, local_1 );
	playerShip = iShip.FindPlayerShip();
	
	if ( (aggressor_ship_ == playerShip) && (Sim.DistanceBetween( playerShip, requestor_ship_ ) < 50000.0) )
	{
		iComms.Shout( requestor_ship_, "", String.Join( String.Join( "stock_attack_", String.FromInt( random ) ), local_11 ) );
	}
	
	debug Debug.PrintString( "iFight.MilitaryCallForBackup: Starting Wait for arrival loop\n" );
	
	if ( (requestor_ship_ != false) && (aggressor_ship_ != false) )
	{
		iAI.GiveAttackOrder( requestor_ship_, aggressor_ship_ );
	}
	
	schedule
	{
		every 30.0:
		{
			if ( iAI.IsOrderComplete( ship_2 ) )
			{
				break;
			}
		}
	}
	
	debug Debug.PrintString( "iFight.MilitaryCallForBackup: Arrived at destination, staying alive while player is here\n" );
	
	schedule
	{
		every 50.0:
		{
			if ( iUtilities.PlayerInRange( Group.Leader( group ) ) )
			{
				break;
			}
		}
	}
	
	debug Debug.PrintString( "iFight.MilitaryCallForBackup: Destroying support vessels\n" );
	Global.Destroy( "g_running_military_call_for_backup" );
	Group.Destroy( group, true );
}

