package iAct2Mission08;

uses Set,
     List,
     String,
     Global,
     Sim,
     Group,
     Math,
     Object,
     State,
     Task,
     Text,
     iSim,
     Subsim,
     iDockport,
     MapEnumerations,
     iMapEntity,
     iLagrangePoint,
     iBody,
     iHabitat,
     iShip,
     iAI,
     iBackToBase,
     iComms,
     iConversation,
     GUI,
     iEmail,
     iEscort,
     iFaction,
     iFormation,
     CargoTypes,
     iInventory,
     iMissionTracker,
     iObjectives,
     iPilotSetup,
     iRangeCheck,
     INIFile,
     iUtilities,
     iCargo,
     iCargoScript,
     Debug,
     iShipCreation;

provides Main,
         MissionHandler,
         Stub;

prototype Main();
prototype Stub();
prototype local_function_10( hstate state_ );
prototype local_function_13();
prototype task local_function_0();
prototype hgroup local_function_8( hship ship_, hmapentity mapentity_ );
prototype hgroup local_function_3();
prototype local_function_1( hship ship_ );
prototype hgroup local_function_4();
prototype hgroup local_function_5( int param_0_ );
prototype int local_function_2( hgroup group_, string param_1_ );
prototype task local_function_6( hgroup group_, hmapentity mapentity_0_, hmapentity mapentity_1_ );
prototype local_function_7( hgroup group_, hmapentity mapentity_ );
prototype task local_function_9( hship ship_, hmapentity mapentity_0_, hmapentity mapentity_1_, hstate state_ );
prototype task local_function_11( hship ship_, hmapentity mapentity_0_, hmapentity mapentity_1_, hstate state_ );
prototype task local_function_12( hship ship_, hmapentity mapentity_0_, hmapentity mapentity_1_, hstate state_ );
prototype task MissionHandler();

Main()
{
	Task.Detach( start local_function_0() );
}

Stub()
{
	Global.SetBool( "g_act2_corporate_holdings_complete", true );
}

local_function_10( hstate state_ )
{
	hsim waypointPesturLPoint;
	hship playerShip = iShip.FindPlayerShip();
	
	waypointPesturLPoint = iUtilities.CreateWaypointRelativeTo( iMapEntity.FindByNameInSystem( "Pestur L-Point", "map:/geog/badlands/mwari" ), 0.0, 5000.0, 5000.0 );
	Object.AddHandleProperty( playerShip, "restart_waypoint", waypointPesturLPoint );
	Object.AddHandleProperty( playerShip, "current_mission_state", state_ );
}

local_function_13()
{
	iObjectives.Remove( "a2_m08_objectives_cover" );
	iObjectives.Remove( "a2_m08_objectives_leave" );
	iObjectives.Remove( "a2_m08_objectives_clear" );
	iObjectives.Remove( "a2_m08_objectives_backdoor" );
}

task local_function_0()
{
	htask local_0;
	int local_1;
	
	while ( iComms.IsInConversation() )
	{
		Task.Sleep( Task.Current(), 0.50 );
	}
	
	if ( !iUtilities.SkipMission( "Corporate Holdings??" ) )
	{
		Task.Detach( local_0 = start MissionHandler() );
		iMissionTracker.AddMission( local_0, 2, 8 );
		return;
	}
	
	Stub();
	return;
}

hgroup local_function_8( hship ship_, hmapentity mapentity_ )
{
	hgroup group = Group.Create();
	hfaction marauders = iFaction.Find( "Marauders" );
	hsim waypoint;
	hsim simProximityMine;
	int local_4 = 10;
	int ii;
	
	waypoint = iUtilities.CreateWaypointRelativeTo( mapentity_, 0.0, 0.0, 3500.0 );
	
	for ( ii = 0; ii < local_4; ++ii )
	{
		simProximityMine = Sim.Create( "ini:/sims/weapons/proximity_mine", "hud_type_mine" );
		iSim.SetFaction( iSim.Cast( simProximityMine ), marauders );
		Sim.SetCullable( iSim.Cast( simProximityMine ), false );
		Group.AddSim( group, simProximityMine );
	}
	
	Sim.PlaceRelativeTo( Group.Leader( group ), waypoint, -1000.0, 1500.0, 0.0 );
	iFormation.Box( group, 1010.0, true );
	waypoint = iUtilities.CreateWaypointRelativeTo( mapentity_, 0.0, 0.0, 8000.0 );
	local_4 = 30;
	
	for ( ii = 0; ii < local_4; ++ii )
	{
		simProximityMine = Sim.Create( "ini:/sims/weapons/proximity_mine", "hud_type_mine" );
		iSim.SetFaction( iSim.Cast( simProximityMine ), marauders );
		Sim.SetCullable( iSim.Cast( simProximityMine ), false );
		Group.AddSim( group, simProximityMine );
	}
	
	Sim.PlaceRelativeTo( Group.Leader( group ), waypoint, -1000.0, 1500.0, 0.0 );
	iFormation.Box( group, 1010.0, true );
	Sim.Destroy( waypoint );
	return group;
}

hgroup local_function_3()
{
	hgroup group = Group.Create();
	hship shipFueltransporterSmall;
	hfaction independent = iFaction.Find( "Independent" );
	int ii;
	
	for ( ii = 0; ii < 4; ++ii )
	{
		shipFueltransporterSmall = iShip.Create( "ini:/sims/ships/utility/fueltransporter_small", iShipCreation.ShipName( "General", -1 ) );
		iPilotSetup.GenericCargoPod( shipFueltransporterSmall );
		Sim.SetCullable( shipFueltransporterSmall, false );
		iSim.SetFaction( shipFueltransporterSmall, independent );
		iSim.SetMissionCritical( shipFueltransporterSmall, true );
		Group.AddSim( group, shipFueltransporterSmall );
	}
	
	return group;
}

local_function_1( hship ship_ )
{
	list localList = List.FromSet( iDockport.DockportsOfType( ship_, DT_All, DS_Any ) );
	int itemCount = List.ItemCount( localList );
	int ii;
	
	for ( ii = 0; ii < itemCount; ++ii )
	{
		iDockport.Disable( iDockport.Cast( List.GetNth( localList, ii ) ) );
	}
}

hgroup local_function_4()
{
	hgroup group = Group.Create();
	hship shipTruckMissileCarrier;
	hfaction independent = iFaction.Find( "Independent" );
	int ii;
	
	shipTruckMissileCarrier = iShip.Create( "ini:/sims/ships/independent/truck_missile_carrier", "a2_master_kiwi" );
	iSim.SetIndestructable( shipTruckMissileCarrier, true );
	iPilotSetup.GenericCargoPod( shipTruckMissileCarrier );
	Sim.SetCullable( shipTruckMissileCarrier, false );
	iSim.SetFaction( shipTruckMissileCarrier, independent );
	Group.AddSim( group, shipTruckMissileCarrier );
	local_function_1( shipTruckMissileCarrier );
	
	for ( ii = 0; ii < 4; ++ii )
	{
		shipTruckMissileCarrier = iShip.Create( "ini:/sims/ships/corporate/interceptor", iShipCreation.ShipName( "General", -1 ) );
		iPilotSetup.GenericCargoPod( shipTruckMissileCarrier );
		iSim.SetFaction( shipTruckMissileCarrier, independent );
		Sim.SetCullable( shipTruckMissileCarrier, false );
		Group.AddSim( group, shipTruckMissileCarrier );
		local_function_1( shipTruckMissileCarrier );
	}
	
	return group;
}

hgroup local_function_5( int param_0_ )
{
	hgroup group = Group.Create();
	hfaction marauders = iFaction.Find( "Marauders" );
	hship shipCutter;
	int ii;
	
	for ( ii = 0; ii < param_0_; ++ii )
	{
		shipCutter = iShip.Create( "ini:/sims/ships/corporate/cutter", iShipCreation.ShipName( "MaasCorporation", -1 ) );
		iPilotSetup.GenericCargoPod( shipCutter );
		iSim.SetFaction( shipCutter, marauders );
		Group.AddSim( group, shipCutter );
	}
	
	return group;
}

int local_function_2( hgroup group_, string param_1_ )
{
	int simCount = Group.SimCount( group_ );
	int local_1;
	int ii;
	
	for ( ii = 0; ii < simCount; ++ii )
	{
		if ( iSim.WorldName( iSim.Cast( Group.NthSim( group_, ii ) ) ) == param_1_ )
		{
			local_1 = ( local_1 + 1 );
		}
	}
	
	return local_1;
}

task local_function_6( hgroup group_, hmapentity mapentity_0_, hmapentity mapentity_1_ )
{
	int simCount_0;
	int simCount_1 = Group.SimCount( group_ );
	
	iAI.GiveApproachOrder( Group.Leader( group_ ), mapentity_0_ );
	iAI.ForceLPRoute( iShip.Cast( Group.Leader( group_ ) ), iLagrangePoint.Cast( mapentity_1_ ), iLagrangePoint.Cast( mapentity_0_ ) );
	
	schedule
	{
		every 1.0:
		{
			simCount_0 = Group.SimCount( group_ );
			
			if ( simCount_0 < simCount_1 )
			{
				simCount_1 = simCount_0;
				iFormation.LineAhead( group_, 50.0, false );
				iAI.GiveApproachOrder( Group.Leader( group_ ), mapentity_0_ );
				iAI.ForceLPRoute( iShip.Cast( Group.Leader( group_ ) ), iLagrangePoint.Cast( mapentity_1_ ), iLagrangePoint.Cast( mapentity_0_ ) );
			}
			
			if ( (local_function_2( group_, "map:/geog/badlands/dagda" ) == 0) || (simCount_0 == 0) )
			{
				return;
			}
		}
	}
}

local_function_7( hgroup group_, hmapentity mapentity_ )
{
	hsim waypoint = iUtilities.CreateWaypointRelativeTo( mapentity_, 0.0, 0.0, 10000.0 );
	
	Sim.PlaceAt( Group.Leader( group_ ), waypoint );
	iFormation.LineAhead( group_, 40.0, true );
}

task local_function_9( hship ship_, hmapentity mapentity_0_, hmapentity mapentity_1_, hstate state_ )
{
	bool local_0 = false;
	bool local_1 = false;
	bool local_2 = false;
	bool local_3 = false;
	hgroup group_0 = local_function_3();
	hgroup group_1 = local_function_4();
	hgroup group_2 = Group.Create();
	hgroup group_3 = local_function_5( 5 );
	hship groupLeader = iShip.Cast( Group.Leader( group_1 ) );
	int simCount_0;
	int simCount_1 = Group.SimCount( group_0 );
	int ii;
	
	Group.AddGroup( group_2, group_0 );
	Group.AddGroup( group_2, group_1 );
	Global.CreateHandle( "g_storage_group", 2, group_2 );
	Sim.PlaceNear( Group.Leader( group_0 ), ship_, 100000.0 );
	iFormation.LineAhead( group_0, 50.0, true );
	iEscort.InFormationGoose( group_1, group_0, 3, 0.0, 250.0, 900.0, 200.0, 10000.0, true );
	start local_function_6( group_0, mapentity_1_, mapentity_0_ );
	
	do
	{
		Task.Sleep( Task.Current(), 1.0 );
	}
	while ( Sim.DistanceBetween( ship_, groupLeader ) > 30000.0 );
	
	if ( State.Progress( state_ ) == 100 )
	{
		return;
	}
	
	iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_good_to" );
	iObjectives.Add( "a2_m08_objectives_cover" );
	Sim.PlaceNear( Group.Leader( group_3 ), ship_, 19000.0 );
	iEscort.Claw( group_3, 50.0, 8000.0, true );
	iAI.GiveAttackOrder( group_3, group_0 );
	iAI.GiveAttackOrder( group_1, group_3 );
	
	schedule
	{
		every 2.0:
		{
			if ( State.Progress( state_ ) != 100 )
			{
				if ( (Group.SimCount( group_0 ) < simCount_1) && (Group.SimCount( group_0 ) != 0) )
				{
					simCount_1 = ( simCount_1 + -1 );
					
					if ( !local_3 )
					{
						local_3 = true;
						iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_vessel_down" );
					}
					else if ( Math.RandomInt( 0, 1 ) == 0 )
					{
						iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_vessel_down" );
					}
					else
					{
						iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_and_another" );
					}
				}
				
				if ( (Group.SimCount( group_0 ) == 0) && !local_1 )
				{
					local_1 = true;
					iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_all_indenture" );
					iObjectives.SetState( "a2_m08_objectives_cover", OS_Failed );
				}
				else if ( (local_function_2( group_0, "map:/geog/badlands/dagda" ) == 0) && !local_0 )
				{
					local_0 = true;
					local_function_7( group_0, mapentity_1_ );
					iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_pull_out" );
					
					if ( !local_1 )
					{
						iObjectives.SetState( "a2_m08_objectives_cover", OS_Succeeded );
					}
					
					iObjectives.Add( "a2_m08_objectives_leave" );
					iEscort.Goose( group_1, 40.0, 8000.0, true );
					iAI.GiveApproachOrder( Group.Leader( group_1 ), mapentity_1_ );
					iAI.ForceLPRoute( iShip.Cast( Group.Leader( group_1 ) ), iLagrangePoint.Cast( mapentity_0_ ), iLagrangePoint.Cast( mapentity_1_ ) );
				}
				else if ( Group.SimCount( group_3 ) && !local_2 )
				{
					local_2 = true;
					group_3 = local_function_5( 6 );
					Sim.PlaceNear( Group.Leader( group_3 ), ship_, 19000.0 );
					iEscort.Claw( group_3, 50.0, 8000.0, true );
					iAI.GiveAttackOrder( group_3, group_0 );
				}
				
				if ( local_0 && (iSim.ActiveWorld() == "map:/geog/badlands/mwari") )
				{
					State.SetProgress( state_, 3 );
					
					if ( Group.SimCount( group_0 ) == 0 )
					{
						iConversation.OneLiner( none, "name_clay", "a2_m08_dialogue_clay_damn_guess" );
						iObjectives.SetState( "a2_m08_objectives_leave", OS_Succeeded );
					}
					else
					{
						simCount_0 = Group.SimCount( group_1 );
						
						if ( local_function_2( group_1, "map:/geog/badlands/mwari" ) != simCount_0 )
						{
							for ( ii = 0; ii < simCount_0; ++ii )
							{
								Sim.SetCullable( Group.NthSim( group_1, ii ), true );
								
								if ( !( iSim.WorldName( iSim.Cast( Group.NthSim( group_1, ii ) ) ) == "map:/geog/badlands/mwari" ) )
								{
									iSim.CapsuleJump( iSim.Cast( Group.NthSim( group_1, ii ) ), iSim.Cast( mapentity_1_ ) );
								}
							}
						}
						
						iObjectives.SetState( "a2_m08_objectives_leave", OS_Succeeded );
						iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_thank" );
						
						switch ( Group.SimCount( group_0 ) )
						{
							case 1:
								iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_1" );
								iInventory.Add( CT_AssaultCannonAmmo, 10 );
								break;
							
							case 2:
								iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_2" );
								iInventory.Add( CT_AssaultCannonAmmo, 10 );
								iInventory.Add( CT_RealCoffee, 10 );
								break;
							
							case 3:
								iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_3" );
								iInventory.Add( CT_AssaultCannonAmmo, 10 );
								iInventory.Add( CT_RealCoffee, 10 );
								iInventory.Add( CT_GoldJewellery, 2 );
								break;
							
							case 4:
								iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_all" );
								iInventory.Add( CT_AssaultCannonAmmo, 10 );
								iInventory.Add( CT_RealCoffee, 10 );
								iInventory.Add( CT_GoldJewellery, 2 );
								iInventory.Add( CT_CuttingBeam, 1 );
								break;
						}
						
						iFormation.LineAhead( group_0, 50.0, false );
						iEscort.InFormationGoose( group_1, group_0, 3, 0.0, 250.0, 900.0, 200.0, 10000.0, false );
						simCount_1 = Group.SimCount( group_0 );
						
						for ( ii = 0; ii < simCount_1; ++ii )
						{
							Sim.SetCullable( Group.NthSim( group_0, ii ), true );
						}
						
						iAI.GiveApproachOrder( Group.Leader( group_0 ), iMapEntity.FindByNameInSystem( "Fort Hope", "map:/geog/badlands/mwari" ) );
						iConversation.OneLiner( groupLeader, "a2_master_name_jarvis", "a2_m08_dialogue_jarvis_i_hope" );
					}
					
					State.SetProgress( state_, 8 );
					return;
				}
			}
			else
			{
				Group.Destroy( group_0, true );
				Group.Destroy( group_1, true );
				Group.Destroy( group_3, true );
				Sim.Destroy( groupLeader );
				return;
			}
		}
	}
}

task local_function_11( hship ship_, hmapentity mapentity_0_, hmapentity mapentity_1_, hstate state_ )
{
	bool local_0 = false;
	hgroup group = local_function_8( ship_, mapentity_0_ );
	int local_2;
	
	iAI.ClearAutopilot();
	iConversation.OneLiner( none, "name_cal", "a2_m08_dialogue_cal_locking_in" );
	iConversation.OneLiner( none, "name_clay", "a2_m08_dialogue_clay_woa_guess" );
	iObjectives.Add( "a2_m08_objectives_clear" );
	
	schedule
	{
		every 2.0:
		{
			if ( State.Progress( state_ ) != 100 )
			{
				local_2 = ( local_2 + 2 );
				
				if ( ((local_2 >= 60) || (Group.SimCount( group ) == 0)) && !local_0 )
				{
					if ( Group.SimCount( group ) == 0 )
					{
						iObjectives.SetState( "a2_m08_objectives_clear", OS_Succeeded );
					}
					else
					{
						iObjectives.SetState( "a2_m08_objectives_clear", OS_Failed );
					}
					
					local_0 = true;
					start local_function_9( ship_, mapentity_0_, mapentity_1_, state_ );
				}
			}
			else
			{
				return;
			}
		}
	}
}

task local_function_12( hship ship_, hmapentity mapentity_0_, hmapentity mapentity_1_, hstate state_ )
{
	bool local_0 = true;
	bool local_1;
	hsim waypoint = iUtilities.CreateWaypointAt( mapentity_0_ );
	
	iUtilities.MakeWaypointVisible( waypoint, true, "a2_m08_name_backdoor" );
	
	schedule
	{
		every 1.0:
		{
			if ( local_0 && ((iSim.ActiveWorld() == "map:/geog/badlands/dagda") && !local_1) )
			{
				local_1 = true;
				local_function_10( state_ );
				State.SetProgress( state_, 2 );
				iBackToBase.Inhibit();
				iObjectives.SetState( "a2_m08_objectives_backdoor", OS_Succeeded );
				start local_function_11( ship_, mapentity_1_, mapentity_0_, state_ );
			}
		}
	}
}

task MissionHandler()
{
	bool local_0 = false;
	hship playerShip;
	hmapentity pesturLPoint = iMapEntity.FindByNameInSystem( "Pestur L-Point", "map:/geog/badlands/mwari" );
	hmapentity dagdaAlphaPrimeLPoint = iMapEntity.FindByNameInSystem( "Dagda Alpha Prime L-Point", "map:/geog/badlands/dagda" );
	hstate taskState = State.Find( Task.Current() );
	hemail email;
	htask currentTask = Task.Current();
	
	Text.Add( "csv:/text/act_2/act2_mission08" );
	Text.Add( "csv:/text/act_2/act2_mission08_addendum" );
	taskState = State.Find( currentTask );
	
	if ( !taskState )
	{
		taskState = State.Create( currentTask, 0 );
	}
	
	email = iEmail.Find( "html:/text/act_2/act2_mission08_email" );
	
	if ( !email )
	{
		iEmail.SendEmail( "a2_m08_email_sender", "a2_m08_email_subject", "html:/text/act_2/act2_mission08_email", true );
		return;
	}
	else if ( !iEmail.Read( email ) )
	{
		return;
	}
	
	Global.CreateBool( "g_running_corporate_holdings", 2, true );
	local_function_10( taskState );
	playerShip = iShip.FindPlayerShip();
	iRangeCheck.AddOutOfSystemTrafficException( iMapEntity.Cast( dagdaAlphaPrimeLPoint ) );
	start local_function_12( playerShip, pesturLPoint, dagdaAlphaPrimeLPoint, taskState );
	iObjectives.Add( "a2_m08_objectives_backdoor" );
	
	schedule
	{
		every 5.0:
		{
			if ( (State.Progress( taskState ) == 8) || (State.Progress( taskState ) == 100) )
			{
				if ( State.Progress( taskState ) == 8 )
				{
					Global.SetBool( "g_act2_corporate_holdings_complete", true );
				}
				else
				{
					atomic
					{
						Global.SetBool( "g_skip_locked", false );
					}
					
					Task.Detach( start local_function_0() );
					local_function_13();
					Sim.Destroy( iSim.FindByNameInSystem( "a2_m08_name_backdoor", "map:/geog/badlands/mwari" ) );
					
					if ( Global.Exists( "g_storage_group" ) )
					{
						Group.Destroy( Group.Cast( Global.Handle( "g_storage_group" ) ), true );
					}
				}
				
				Global.Destroy( "g_storage_group" );
				iUtilities.RemoveMissionRestart();
				State.Destroy( Task.Current() );
				iMissionTracker.RemoveMission( Task.Current() );
				Global.Destroy( "g_running_corporate_holdings" );
				iBackToBase.Allow();
				return;
			}
		}
	}
}

